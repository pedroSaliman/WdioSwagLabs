import type { SuiteStats, HookStats, RunnerStats, TestStats, BeforeCommandArgs, AfterCommandArgs, CommandArgs } from '@wdio/reporter';
import WDIOReporter from '@wdio/reporter';
import { addFeature, addLabel, addSeverity, addIssue, addTestId, addStory, addEnvironment, addDescription, addAttachment, startStep, endStep, addStep, addArgument } from './common/api.js';
import type { AddAttachmentEventArgs, AddDescriptionEventArgs, AddEnvironmentEventArgs, AddFeatureEventArgs, AddIssueEventArgs, AddLabelEventArgs, AddSeverityEventArgs, AddStoryEventArgs, AddTestIdEventArgs, Status, AllureReporterOptions } from './types.js';
export default class AllureReporter extends WDIOReporter {
    private _allure;
    private _capabilities;
    private _isMultiremote?;
    private _config?;
    private _lastScreenshot?;
    private _options;
    private _consoleOutput;
    private _originalStdoutWrite;
    private _addConsoleLogs;
    private _startedFeatures;
    constructor(options?: AllureReporterOptions);
    registerListeners(): void;
    onRunnerStart(runner: RunnerStats): void;
    onSuiteStart(suite: SuiteStats): void;
    onSuiteEnd(suite: SuiteStats): any;
    onTestStart(test: TestStats | HookStats): void;
    setCaseParameters(cid: string | undefined, parentUid: string | undefined): void;
    getParentSuite(uid?: string): SuiteStats | undefined;
    getLabels({ tags }: SuiteStats): {
        name: string;
        value: string;
    }[];
    onTestPass(): any;
    onTestFail(test: TestStats | HookStats): void;
    onTestSkip(test: TestStats): void;
    onBeforeCommand(command: BeforeCommandArgs): void;
    onAfterCommand(command: AfterCommandArgs): void;
    onHookStart(hook: HookStats): false | undefined;
    onHookEnd(hook: HookStats): false | undefined;
    addLabel({ name, value }: AddLabelEventArgs): false | undefined;
    addStory({ storyName }: AddStoryEventArgs): false | undefined;
    addFeature({ featureName }: AddFeatureEventArgs): false | undefined;
    addSeverity({ severity }: AddSeverityEventArgs): false | undefined;
    addIssue({ issue }: AddIssueEventArgs): false | undefined;
    addTestId({ testId }: AddTestIdEventArgs): false | undefined;
    addEnvironment({ name, value }: AddEnvironmentEventArgs): false | undefined;
    addDescription({ description, descriptionType }: AddDescriptionEventArgs): false | undefined;
    addAttachment({ name, content, type }: AddAttachmentEventArgs): false | undefined;
    startStep(title: string): false | undefined;
    endStep(status: Status): false | undefined;
    addStep({ step }: any): false | undefined;
    addArgument({ name, value }: any): false | undefined;
    isAnyTestRunning(): any;
    isScreenshotCommand(command: CommandArgs): boolean;
    dumpJSON(name: string, json: object): void;
    attachScreenshot(): void;
    /**
     * public API attached to the reporter
     * deprecated approach and only here for backwards compatibility
     */
    static addFeature: typeof addFeature;
    static addLabel: typeof addLabel;
    static addSeverity: typeof addSeverity;
    static addIssue: typeof addIssue;
    static addTestId: typeof addTestId;
    static addStory: typeof addStory;
    static addEnvironment: typeof addEnvironment;
    static addDescription: typeof addDescription;
    static addAttachment: typeof addAttachment;
    static startStep: typeof startStep;
    static endStep: typeof endStep;
    static addStep: typeof addStep;
    static addArgument: typeof addArgument;
}
//# sourceMappingURL=reporter.d.ts.map